@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Map view Page";
}
<html>
  <head>
    <title>Add Map</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
  </head>
  <body>
    <h3>My Google Maps Demo</h3>
    <!--The div element for the map -->
    <div id="map"></div>
    <script>//version 5: display buyer markers that are only in sellers range

// The following example creates five accessible and
// focusable markers.
function initMap() {
    const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 16,
        center: { lat: -25.344, lng: 131.031 },
        
        mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
      mapTypeIds: ["roadmap", "terrain"],
    },
    });
    var myArray = [];
    const buyerDetails = [];
    @foreach(var d in Model)
        {
             string location = @d.Location.ToString();
             string[] locationResult = location.Split(' ');
             string Name = @d.Name;
             if(locationResult.Length > 1)
             {
                  var locationObj =  float.Parse(locationResult[0]) + " " + float.Parse(locationResult[1]);
                  @:myArray.push("@locationObj" + " " + "@d.Name");
             }
        }
//alert(myArray);
    var key = ['lat', 'lng'];
    var buyerName;
    var mapsBuyerMarker = [];
        myArray.forEach(function(element) {
        var buyerdetails = element.trim().split(/\s+/);
        buyerdetails[0] = parseFloat(buyerdetails[0])
        buyerdetails[1] = parseFloat(buyerdetails[1])
        buyerName = buyerdetails[2]
        buyerdetails.splice(-1);
        var buyerlocationObj = Object.assign({}, ...key.map((e, i) => ({ [e]: buyerdetails[i] })))
        var buyerTemp = [];
        buyerTemp.push(buyerlocationObj, buyerName);
        mapsBuyerMarker.push(buyerTemp);
    });
    var sellerLocation = '@ViewBag.location';
    var sellerName = '@ViewBag.Name';
    var sellerlocationObj;
    var mapsSellerMarker = [];
    var cityCircle;
    var sellerLocation = sellerLocation.trim().split(/\s+/);
    sellerLocation[0] = parseFloat(sellerLocation[0])
    sellerLocation[1] = parseFloat(sellerLocation[1])
    sellerlocationObj = Object.assign({}, ...key.map((e, i) => ({ [e]: sellerLocation[i] })))
    var sellerTemp = [];
    sellerTemp.push(sellerlocationObj, sellerName);
    mapsSellerMarker.push(sellerTemp);

    const infoWindow = new google.maps.InfoWindow();
    mapsSellerMarker.forEach(([position]) => {
        cityCircle = new google.maps.Circle({
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillOpacity: 0.18,
            map,
            center: position,
            radius: Math.sqrt(50) * 100,
        })
        map.fitBounds(cityCircle.getBounds())

    });

    function isMarkerInArea(circle, marker) {
        return (circle.getBounds().contains(marker))
    };

    mapsBuyerMarker.forEach(([position, title], i) => {
        if (isMarkerInArea(cityCircle, position)) {
            const marker = new google.maps.Marker({
                position,
                map,
                title: `${i + 1}. ${title}`,
                label: `${i + 1}`,
                optimized: true,
            });
              marker.addListener("click", () => {
                infoWindow.close();
                infoWindow.setContent(marker.getTitle());
                infoWindow.open(marker.getMap(), marker);
                map.setZoom(18);
                map.setCenter(data.location);
            });

        }
    });


}

window.initMap = initMap;
</script>
   <script 
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyALaJrPN6QMHNeLybORzfRQcHzGTWkWI_A&callback=initMap&v=weekly"
      defer
    ></script>
  </body>
</html>
