@model List<Buyer>

@{
ViewBag.Title = "Map view";
}
<html>
  <head>
    <title>Add Map</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
        <link rel="script" type="text/javascript" href="~/js/js.css" />

  </head>
  <body>
 
    <div id="map"></div>
    
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyALaJrPN6QMHNeLybORzfRQcHzGTWkWI_A&callback=initMap&v=weekly"
      defer
    ></script>
  </body>
</html>



<script>

    function initMap() {
    const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 12,
        center: { lat: 34.84555, lng: -111.8035 },
        mapTypeId: 'roapmap'
    });

    var myArray = [];
    var buyerDetails = [];
     @foreach(var d in Model)
    {
        string location = @d.Location.ToString();
        string[] locationResult = location.Split(' ');
        string Name = @d.Name;
        if(locationResult.Length > 1)
        {
            var locationObj =  float.Parse(locationResult[0]) + " " + float.Parse(locationResult[1]);
            @:myArray.push("@locationObj"+" "+ "@d.Name");                       
        }
    }
    
   
    //console.log(myArray);

    //var cityCircle;
    var key = ['lat', 'lng'];
    var buyerName;
    var mapsBuyerMarker = [];

      myArray.forEach(function (element) {
      var buyerdetails = element.trim().split(/\s+/);
      buyerdetails[0] = parseFloat(buyerdetails[0])
      buyerdetails[1] = parseFloat(buyerdetails[1])
      buyerName = buyerdetails[2] 
      buyerdetails.splice(-1);
      var buyerlocationObj = Object.assign({}, ...key.map((e, i) => ({ [e]: buyerdetails[i] })))
      //alert(buyerdetails[0]);
      //alert(buyerdetails[1]);
      //alert(buyerName);
      var buyerTemp = [];
      buyerTemp.push(buyerlocationObj, buyerName);
      mapsBuyerMarker.push(buyerTemp);
    });
    //.log(mapsBuyerMarker);


    var sellerLocation = '@ViewBag.location';
    var sellerName = '@ViewBag.Name';
    var sellerlocationObj;
    var mapsSellerMarker = [];
     var   cityCircle;

    var sellerLocation = sellerLocation.trim().split(/\s+/);
    sellerLocation[0] = parseFloat(sellerLocation[0])
    sellerLocation[1] = parseFloat(sellerLocation[1])
    sellerlocationObj = Object.assign({}, ...key.map((e, i) => ({ [e]: sellerLocation[i] })))
    var sellerTemp = [];
    sellerTemp.push(sellerlocationObj,sellerName);
    mapsSellerMarker.push(sellerTemp);
    //console.log(mapsSellerMarker);
   // alert(mapsSellerMarker);

    // Create an info window to share between markers.
    const infoWindow = new google.maps.InfoWindow();
     mapsSellerMarker.forEach(([position]) => {
        cityCircle = new google.maps.Circle({
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillOpacity: 0.18,
            map,
            center: position,
            radius: Math.sqrt(50) * 100,
        })
    }); 
   
    // function to check if buyer is in seller range
    function isMarkerInArea(circle, marker) {
        return (circle.getBounds().contains(marker))
    };

    // display buyer marker that are only in  seller radius.
    mapsBuyerMarker.forEach(([position, title], i) => {
        if (isMarkerInArea(cityCircle, position)) {
            const marker = new google.maps.Marker({
                position,
                map,
                title: `${i + 1}. ${title}`,
                label: `${i + 1}`,
                optimized: true,
            });
            // Add a click listener for each marker, and set up the info window.
            marker.addListener("click", () => {
                infoWindow.close();
                infoWindow.setContent(marker.getTitle());
                infoWindow.open(marker.getMap(), marker);
                map.setZoom(18);
                map.setCenter(data.location);
            });
        }

    });
  
}

window.initMap = initMap;

</script>